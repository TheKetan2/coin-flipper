{"version":3,"sources":["logo.svg","App.js","Coin.js","serviceWorker.js","index.js"],"names":["module","exports","App","Component","props","flipp","Math","floor","random","setState","head","state","face","tail","className","this","src","alt","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,qIC4D5BC,G,YC1DmBC,Y,YDIhC,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,MAAQ,WACgC,IAAlCC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClB,EAAKC,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,EAAGE,KAAM,SAEjD,EAAKH,SAAS,CAAEI,KAAM,EAAKF,MAAME,KAAO,EAAGD,KAAM,UAVnD,EAAKD,MAAQ,CACXD,KAAM,EACNG,KAAM,EACND,KAAM,IALS,E,sEAoBjB,OACE,yBAAKE,UAAU,OAMQ,IAApBC,KAAKJ,MAAMD,MAAiC,GAAnBK,KAAKJ,MAAME,KACnC,yBACEG,IAAI,wFACJC,IAAI,SAEgB,SAApBF,KAAKJ,MAAMC,KACb,yBACEI,IAAI,6FACJC,IAAI,SAGN,yBACED,IAAI,6FACJC,IAAI,SAGR,6BACE,4BAAQC,QAASH,KAAKV,OAAtB,SAEF,qCACUU,KAAKJ,MAAMD,KADrB,cACsCK,KAAKJ,MAAME,W,GAhDvCM,IAAMhB,YEOJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.177e545a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Coin from \"./Coin\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      head: 0,\n      tail: 0,\n      face: \"\"\n    };\n  }\n  flipp = () => {\n    if (Math.floor(Math.random() * 2) === 1) {\n      this.setState({ head: this.state.head + 1, face: \"Head\" });\n    } else {\n      this.setState({ tail: this.state.tail + 1, face: \"Tail\" });\n    }\n  };\n  render() {\n    const coinUrl = [\n      \"https://www.marshu.com/articles/images-website/articles/presidents-on-coins/dime-coin-head.jpg\",\n      \"https://www.marshu.com/articles/images-website/articles/presidents-on-coins/dime-coin-tail.jpg\"\n    ];\n    return (\n      <div className=\"App\">\n        {/* <Coin\n          head={this.state.head}\n          tail={this.state.tail}\n          face={this.state.head}\n        /> */}\n        {this.state.head === 0 && this.state.tail == 0 ? (\n          <img\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/flip_coin.png\"\n            alt=\"Head\"\n          />\n        ) : this.state.face === \"Head\" ? (\n          <img\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/dime-coin-head.jpg\"\n            alt=\"Head\"\n          />\n        ) : (\n          <img\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/dime-coin-tail.jpg\"\n            alt=\"Tail\"\n          />\n        )}\n        <div>\n          <button onClick={this.flipp}>Flip</button>\n        </div>\n        <p>\n          Heads: {this.state.head} vs Tails: {this.state.tail}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\n\r\nexport default class Coin extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.head === 0 && this.props.tail === 0 ? (\r\n          <img\r\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/flip_coin.png\"\r\n            alt=\"Nothing\"\r\n          />\r\n        ) : this.props.face === \"Head\" ? (\r\n          <img\r\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/dime-coin-head.jpg\"\r\n            alt=\"Head\"\r\n          />\r\n        ) : (\r\n          <img\r\n            src=\"https://raw.githubusercontent.com/TheKetan2/coin-flipper/master/src/img/dime-coin-tail.jpg\"\r\n            alt=\"Tail\"\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}